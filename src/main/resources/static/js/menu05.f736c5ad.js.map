{"version":3,"file":"js/menu05.f736c5ad.js","mappings":"6LACOA,MAAM,Q,GACTC,EAAAA,EAAAA,GAAwC,OAAnCD,MAAM,eAAc,aAAS,G,GAC7BA,MAAM,a,0CAFbE,EAAAA,EAAAA,IAMM,MANN,EAMM,CALJC,GACAF,EAAAA,EAAAA,GAGM,MAHN,EAGM,EAFJA,EAAAA,EAAAA,GAAuE,UAA9DG,QAAK,oBAAEC,EAAAA,WAAAA,EAAAA,aAAAA,IAAWL,MAAM,4BAA2B,OAC5DC,EAAAA,EAAAA,GAAsE,UAA7DG,QAAK,oBAAEC,EAAAA,WAAAA,EAAAA,aAAAA,IAAWL,MAAM,uBAAsB,c,cAS7D,GAEEM,MAAO,CAAC,SAERC,MAAO,CAAC,mBAGRC,MAAMF,EAAOG,GAEXC,QAAQC,IAAI,sBACZD,QAAQC,KAAIC,EAAAA,EAAAA,IAAMN,IAGlB,MAAMO,GAAQC,EAAAA,EAAAA,IAAI,GAElB,SAASC,IACPL,QAAQC,IAAI,eAEd,SAASK,IACPP,EAAQQ,KAAK,kBAAmB,UAGlC,MAAO,CACLJ,MAAAA,EACAE,UAAAA,EACAC,UAAAA,K,QClCN,MAAME,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,Q,yJCIAC,EAAAA,EAAAA,KAAc,KACZV,QAAQC,IAAI,uBAEdU,EAAAA,EAAAA,KAAU,KACRX,QAAQC,IAAI,mBAEdW,EAAAA,EAAAA,KAAgB,KACdZ,QAAQC,IAAI,yBAEdY,EAAAA,EAAAA,KAAY,KACVb,QAAQC,IAAI,oB,0CClBd,MAAM,EAAc,EAEpB,Q,8HCWA,MAAME,GAAQC,EAAAA,EAAAA,IAAI,GAUlB,SAASU,IAEP,OADAd,QAAQC,IAAI,eACS,IAAdE,EAAMY,M,OATfC,EAAAA,EAAAA,KAAe,KACbhB,QAAQC,IAAI,wBAEdgB,EAAAA,EAAAA,KAAU,KACRjB,QAAQC,IAAI,kB,gWCpBd,MAAM,EAAc,EAEpB,Q,8HCWA,SAASiB,EAAYC,GACnBnB,QAAQC,IAAI,QAASkB,G,6ICdvB,MAAM,EAAc,EAEpB,S,8NCOA,MAAMC,GAAOhB,EAAAA,EAAAA,IAAI,IAEjB,SAASU,IACPM,EAAKL,OAAS,E,OAGhBM,EAAa,CACXD,KAAAA,EACAN,OAAAA,I,8GCjBF,MAAMN,EAAc,EAEpB,Q,8OCsBA,MAAMY,GAAOhB,EAAAA,EAAAA,IAAI,UACXkB,GAAWlB,EAAAA,EAAAA,IAAI,MACfmB,GAAWnB,EAAAA,EAAAA,IAAI,MASrB,SAASoB,IACPF,EAASP,MAAMA,MAAQK,EAAKL,MAG9B,SAASU,IACPF,EAASR,MAAMK,MAAQ,EAGzB,SAASM,IACPH,EAASR,MAAMD,S,OAhBjBH,EAAAA,EAAAA,KAAU,KACRX,QAAQC,IAAIqB,EAASP,OACrBO,EAASP,MAAMY,QAEf3B,QAAQC,IAAIsB,M,sjBChCd,MAAM,EAAc,EAEpB","sources":["webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/SetupHook.vue","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/SetupHook.vue?bf60","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/MountHook.vue","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/MountHook.vue?268c","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/UpdateHook.vue","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/UpdateHook.vue?07a8","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/index.vue","webpack://front-end-vue/./src/views/menu05/Exam01LifeCycleHooks/index.vue?ea38","webpack://front-end-vue/./src/views/menu05/Exam02TemplateRefs/Child.vue","webpack://front-end-vue/./src/views/menu05/Exam02TemplateRefs/Child.vue?c1a9","webpack://front-end-vue/./src/views/menu05/Exam02TemplateRefs/index.vue","webpack://front-end-vue/./src/views/menu05/Exam02TemplateRefs/index.vue?2abb"],"sourcesContent":["<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">SetupHook</div>\r\n    <div class=\"card-body\">\r\n      <button @click=\"handleBtn\" class=\"btn btn-info btn-sm mr-2\">버튼</button>\r\n      <button @click=\"emitEvent\" class=\"btn btn-info btn-sm\">이벤트 발생</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, toRaw } from \"vue\";\r\n// 아래와 같은 코드스타일은 사실 빌드과정이 있는 개발환경에서는 안쓰는게 좋다.\r\n// 걍 이런 방식도 있다는 걸 참고하라고 교수님이 적어주는 것.\r\nexport default {\r\n  // props 선언(선언은 setup안에서 하는게 아니다!)\r\n  props: [\"prop1\"],\r\n  // 이벤트 선언\r\n  emits: [\"component-event\"],\r\n\r\n  // setup()훅 재정의\r\n  setup(props, context) {\r\n    // context는 뷰의 환경을 의미.(emit이 context로부터 제공됨)\r\n    console.log(\"created 상태가 될 때 실행\");\r\n    console.log(toRaw(props));\r\n    // 이벤트 선언\r\n    // 반응형 속성 선언\r\n    const count = ref(0);\r\n    // 이벤트 핸들러 선언\r\n    function handleBtn() {\r\n      console.log(\"handleBtn()\");\r\n    }\r\n    function emitEvent() {\r\n      context.emit(\"component-event\", \"value1\");\r\n    }\r\n\r\n    return {\r\n      count,\r\n      handleBtn,\r\n      emitEvent,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n","import { render } from \"./SetupHook.vue?vue&type=template&id=bf60e11e\"\nimport script from \"./SetupHook.vue?vue&type=script&lang=js\"\nexport * from \"./SetupHook.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\osstem\\\\projects\\\\node-workspace\\\\front-end-vue\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">MountHook</div>\r\n    <div class=\"card-body\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onBeforeMount, onMounted, onBeforeUnmount, onUnmounted } from \"vue\";\r\n\r\n// hook에서 쓰이는 로직은 콜백으로 호출한다.\r\nonBeforeMount(() => {\r\n  console.log(\"onBeforeMount()\");\r\n});\r\nonMounted(() => {\r\n  console.log(\"onMounted()\");\r\n});\r\nonBeforeUnmount(() => {\r\n  console.log(\"onBeforeUnmount()\");\r\n});\r\nonUnmounted(() => {\r\n  console.log(\"onUnmounted()\");\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n","import script from \"./MountHook.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MountHook.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">UpdateHook</div>\r\n    <div class=\"card-body\">\r\n      <p>count : {{ count }}</p>\r\n      <p>method returned value : {{ method() }}</p>\r\n      <button @click=\"count++\" class=\"btn btn-info btn-sm mr-2\">증가</button>\r\n      <button @click=\"count--\" class=\"btn btn-info btn-sm\">감소</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onBeforeUpdate, onUpdated, ref } from \"vue\";\r\n\r\n// 반응형 속성 선언하기\r\nconst count = ref(0);\r\n\r\n// hook에서 쓰이는 로직은 콜백으로 호출한다.\r\nonBeforeUpdate(() => {\r\n  console.log(\"onBeforeUpdate()\");\r\n});\r\nonUpdated(() => {\r\n  console.log(\"onUpdated()\");\r\n});\r\n\r\nfunction method() {\r\n  console.log(\"method() 실행\");\r\n  return count.value * 100;\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n","import script from \"./UpdateHook.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UpdateHook.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">Exam01LifeCycleHooks</div>\r\n    <div class=\"card-body\">\r\n      <SetupHook prop1=\"value1\" @component-event=\"handleEvent\" />\r\n      <MountHook/>\r\n      <UpdateHook/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport SetupHook from \"./SetupHook.vue\";\r\nimport MountHook from \"./MountHook.vue\";\r\nimport UpdateHook from \"./UpdateHook.vue\";\r\n\r\nfunction handleEvent(arg1) {\r\n  console.log(\"arg1:\", arg1);\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">Child</div>\r\n    <div class=\"card-body\">\r\n      <p>data: {{ data }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, defineExpose } from \"vue\";\r\n\r\nconst data = ref(10);\r\n\r\nfunction method() {\r\n  data.value -= 1;\r\n}\r\n\r\ndefineExpose({ // 아~~~ 정말 안 좋은 방법이다.\r\n  data,\r\n  method,\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n","import script from \"./Child.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Child.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">Exam02TemplateRefs</div>\r\n    <div class=\"card-body\">\r\n      <h6>[DOM 요소 참조]</h6>\r\n      <p>data: {{ data }}</p>\r\n      <button @click=\"setInputValue\" class=\"btn btn-info btn-sm mr-2\">값 변경</button>\r\n      <input type=\"text\" ref=\"inputRef\" name=\"mid\" />\r\n\r\n      <hr />\r\n\r\n      <h6>[자식컴포넌트 참조] (안 좋은 예)</h6>\r\n      <!--이런 방식이 가능은 하지만, 좋지 않은 예다. 자식컴포넌트와의 결합도가 높아지기 때문.-->\r\n      <p>child data: {{ childRef !== null ? childRef.data : \"\" }}</p>\r\n      <p>\r\n        <button @click=\"changeChildData\" class=\"btn btn-info btn-sm mr-2\">자식 데이터 변경</button>\r\n        <button @click=\"callChildMethod\" class=\"btn btn-info btn-sm mr-2\">자식 메소드 호출</button>\r\n      </p>\r\n      <Child ref=\"childRef\" /> <!-- 이러지 말자... props와 emit을 활용해라. -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { onMounted, ref } from \"vue\";\r\nimport Child from \"./Child\";\r\n\r\nconst data = ref(\"summer\");\r\nconst inputRef = ref(null); //처음엔 랜더링도 안된 상태기때문에 어떻게 뭐 값을 넣을 수가 없음. 그래서 null로 초기화시키는거임.\r\nconst childRef = ref(null);\r\n\r\nonMounted(() => {\r\n  console.log(inputRef.value);\r\n  inputRef.value.focus();\r\n\r\n  console.log(childRef);\r\n});\r\n\r\nfunction setInputValue() {\r\n  inputRef.value.value = data.value;\r\n}\r\n\r\nfunction changeChildData() {\r\n  childRef.value.data += 1;\r\n}\r\n\r\nfunction callChildMethod() {\r\n  childRef.value.method(); // 내 자식의 메소드를 내가 호출하는 건 안 좋은 방법임.\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["class","_createElementVNode","_createElementBlock","_hoisted_2","onClick","$setup","props","emits","setup","context","console","log","toRaw","count","ref","handleBtn","emitEvent","emit","__exports__","render","onBeforeMount","onMounted","onBeforeUnmount","onUnmounted","method","value","onBeforeUpdate","onUpdated","handleEvent","arg1","data","expose","inputRef","childRef","setInputValue","changeChildData","callChildMethod","focus"],"sourceRoot":""}